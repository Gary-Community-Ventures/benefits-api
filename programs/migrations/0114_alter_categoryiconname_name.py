# Generated by Django 4.2.15 on 2025-06-30 19:33

from django.db import migrations, models
from integrations.services.google_translate.integration import Translate
from collections import defaultdict
from django.conf import settings
from tqdm import tqdm


def sync_data(apps, _):
    
    URGENT_NEED_TYPE_MAP = {
        "co": {
            "bia_food": "Food or groceries",
            "imatter": "Behavioral health",
            "child_first": "Child's development",
            "cls": "Civil legal needs",
            "coemap": "Managing housing costs",
            "rhc": "Family planning or birth control",
            "hfc": "Food or groceries",
            "cda": "Low-cost dental care",
            "ndbn": "Baby supplies",
            "cedp": "Managing housing costs",
            "dbap": "Funeral, burial, or cremation costs",
            "chc": "Managing housing costs",
            "meal": "Food or groceries",
            "pat": "Child's development",
            "better_offer": "Job resources",
            "coid": "Civil legal needs",
            "frca": "Baby supplies",
            "trua": "Managing housing costs",
            "well_power": "Behavioral health",
            "rwa": "Managing housing costs",
            "ffap": "Managing housing costs",
            "eic": "Child's development",
            "ccs": "Behavioral health",
            "snap_employment": "Job resources",
            "plentiful": "Food or groceries",
            "ecmh": "Child's development",
            "deap": "Managing housing costs",
            "hippy": "Child's development",
            "fps": "Family planning",
            "eocbpa": "Managing housing costs",
        },
        "nc": {
            "nc_housing_counseling_services": "Managing housing costs",
            "nc_statewide_peer_warmline": "Behavioral health",
            "nc_better_balance": "Civil legal needs",
            "nc_home_advantage_mortgage": "Managing housing costs",
            "nc_independent_living_rehabilitation_program": "Managing housing costs",
            "nc_exceptional_childrens_assistance_center": "Child's development",
            "nc_beam": "Behavioral health",
            "nc_urgent_repair_program": "Managing housing costs",
            "nc_gold_star": "Managing housing costs",
            "nc_childrens_home_society_of_north_carolina": "Child's development",
            "nc_housing_search_org": "Managing housing costs",
            "nc_behavioral_health_services": "Behavioral health",
            "nc_usda_rural_development": "Managing housing costs",
            "nc_veterans_life_center": "Managing housing costs",
            "nc_the_cloth_option": "Baby supplies",
            "nc_first_call_program": "Child's development",
            "nc_counselorfind": "Behavioral health",
            "nc_neighborhood_assistance": "Managing housing costs",
            "nc_diaper_bank_of_north_carolina": "Baby supplies",
            "nc_national_parent_helpline": "Child's development",
            "nc_smart_home_program": "Managing housing costs",
            "nc_culinary_hospitality_outreach_wellness": "Behavioral health",
            "nc_bhangi_gold": "Baby supplies",
            "nc_legal_aid_of_north_carolina": "Civil legal needs",
            "nc_baptist_aging_ministry": "Managing housing costs",
            "nc_nc_childrens_developmental_services_agencies": "Child's development",
            "nc_treatment_locator": "Behavioral health",
            "nc_planned_parenthood_south_atlantic": "Family planning",
            "nc_lawhelpnc": "Civil legal needs",
            "nc_peer_support_services": "Managing housing costs",
            "nc_nc_works": "Job resources",
            "nc_find_a_job": "Job resources",
            "nc_nc_county_health_department": "Family planning",
            "nc_alcohol_drug_council_of_north_carolina": "Behavioral health",
            "nc_nc_coordinated_entry_services": "Managing housing costs",
            "nc_feeding_the_carolinas": "Food or groceries",
            "nc_home_at_last": "Managing housing costs",
            "nc_home_plan_assistance": "Managing housing costs",
            "nc_resources_for_resilience": "Child's development",
            "nc_face_it_together": "Behavioral health",
            "nc_triple_p": "Child's development",
            "nc_housing_assistance": "Managing housing costs",
            "nc_child_find_of_america": "Child's development",
            "nc_homebuyer_counseling": "Managing housing costs",
            "nc_mental_health_america": "Behavioral health",
            "nc_the_arc_of_nc_housing": "Managing housing costs",
            "nc_creating_a_family": "Child's development",
            "nc_housing_counseling": "Managing housing costs",
            "nc_us_department_of_housing_and_urban_development": "Managing housing costs",
            "nc_nami_north_carolina": "Behavioral health",
            "nc_nc_safety_net_dental_clinics": "Low-cost dental care",
            "nc_north_carolina_oral_health_collaborative": "Low-cost dental care",
        },
        "ma": {
            "ma_project_bread": "Food or groceries",
            "ma_family_shelter": "Managing housing costs",
            "ma_raft": "Managing housing costs",
            "ma_good_neighbor_energy": "Managing housing costs",
            "ma_heartwap": "Managing housing costs",
            "ma_vital_village": "Baby supplies",
            "ma_lawyers_clearinghouse": "Civil legal needs",
            "ma_dental": "Low-cost dental care",
            "ma_masshire": "Job resources",
            "ma_early_intervention": "Child's development",
            "ma_unemployment": "Job resources",
            "ma_rental_voucher": "Managing housing costs",
            "ma_DAV": "Veterans resources",
            "ma_chapter_115_veterans": "Veterans resources",
            "ma_healthy_baby_healthy_child": "Child's development",
            "ma_vet_law": "Veterans resources",
            "ma_beh_health": "Behavioral health",
            "ma_alternative_housing_voucher": "Managing housing costs",
            "ma_family_support_centers": "Child's development",
            "ma_fam_access": "Family planning",
            "ma_cons_protection": "Civil legal needs",
            "ma_legal_finder": "Civil legal needs",
            "ma_housing_works": "Managing housing costs",
        },
    }

    PROGRAM_CATEGORY_ICON_MAP = {
        "co_tax_calculator": {"tax_credit_calculator": "tax_credit"},
        "co_energy_calculator": {
            "co_energy_calculator_referral_programs": "talk",
            "co_energy_calculator_assistance_programs": "heat",
            "co_energy_calculator_emergency_services": "low_fuel",
            "co_energy_calculator_efficiency_upgrades": "light_bulb",
        },
        "nc": {
            "nc_housing": "housing",
            "nc cash": "cash",
            "nc food": "food",
            "nc healthcare": "health_care",
            "taxCredits": "tax_credit",
            "nc childcare": "child_care",
        },
        "co": {
            "transportation": "transportation",
            "housing": "housing",
            "cash": "cash",
            "food": "food",
            "child_care": "child_care",
            "health_care": "health_care",
            "tax_credit": "tax_credit",
        },
        "ma": {
            "ma_tax_credit": "tax_credit",
            "ma_transportation": "transportation",
            "ma_housing": "housing",
            "ma_health_care": "health_care",
            "ma_child_care": "child_care",
            "ma_cash": "cash",
            "ma_food": "food",
        },
    }

    UrgentNeed = apps.get_model("programs", "UrgentNeed")
    Translation = apps.get_model("translations", "Translation")
    UrgentNeedType = apps.get_model("programs", "UrgentNeedType")
    CategoryIconName = apps.get_model("programs", "CategoryIconName")
    WhiteLabel = apps.get_model("screener", "WhiteLabel")
    ProgramCategory = apps.get_model("programs", "ProgramCategory")

    # {white_label_code: {urgent_need_external_name: type_name}}
    urgent_need_type_mapping = defaultdict(dict, URGENT_NEED_TYPE_MAP)

    # {white_label_code: {program_category_external_name: icon_name}}
    program_category_icon_mapping = defaultdict(dict, PROGRAM_CATEGORY_ICON_MAP)

    need_type_lookup = defaultdict(dict)

    # Create Urgent Need Types for each white label based on the mapping.
    for wl_code, type_dict in tqdm(urgent_need_type_mapping.items(), desc="Syncing Urgent Need Types"):
        white_label = WhiteLabel.objects.get(code=wl_code)
        for need_en, type_name in type_dict.items():
            icon = CategoryIconName.objects.filter(name__iexact=type_name).first()

            need_type = UrgentNeedType.objects.filter(
                white_label=white_label, name__translations__text__iexact=type_name.strip()
            ).first()

            if not need_type:
                translation = Translation.objects.add_translation(f"urgent_need_type.{icon}_temporary_key-name")

                # set icon
                icon_instance = None
                if icon:
                    icon_instance = icon
                    
                need_type = UrgentNeedType.objects.create(
                    icon=icon_instance,
                    white_label=white_label,
                    name=translation,
                )

                translation.label = f"urgent_need_type.{icon}_{need_type.id}-name"
                translation.save()

                # translate the 'name' field
                base_lang = settings.LANGUAGE_CODE
                name_translation = need_type.name

                Translation.objects.edit_translation_by_id(name_translation.id, base_lang, type_name)

                for lang_code, _ in settings.LANGUAGES:
                    if lang_code == base_lang:
                        continue
                    auto_translated = Translate().translate(lang_code, type_name)
                    translated_obj = Translation.objects.edit_translation_by_id(
                        name_translation.id, lang_code, auto_translated
                    )
                    translated_obj.edited = False
                    translated_obj.save()

            need_type_lookup[need_en] = need_type.id

        # Assign the urgent need types to the urgent needs.
        for need in UrgentNeed.objects.filter(white_label=white_label):
            category_type_id = need_type_lookup.get(need.external_name)
            if not category_type_id:
                continue
            category_type = UrgentNeedType.objects.get(id=category_type_id)
            UrgentNeed.objects.filter(id=need.id).update(category_type=category_type)

    # Assign program category icons based on the mapping.
    for wl_code, icon_dict in tqdm(program_category_icon_mapping.items(), desc="Syncing Program Category Icons"):
        white_label = WhiteLabel.objects.get(code=wl_code)
        for category_en, icon_name in icon_dict.items():
            icon = CategoryIconName.objects.filter(name__iexact=icon_name).first()
            category = ProgramCategory.objects.filter(white_label=white_label, external_name=category_en).first()
            ProgramCategory.objects.filter(id=category.id).update(icon=icon)


class Migration(migrations.Migration):

    dependencies = [
        ("programs", "0113_alter_programcategory_icon"),
    ]

    operations = [
        migrations.AlterField(
            model_name="categoryiconname",
            name="name",
            field=models.CharField(max_length=120, unique=True),
        ),
        migrations.RunPython(sync_data, migrations.RunPython.noop),
    ]
